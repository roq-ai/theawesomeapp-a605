generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model attachment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_path  String   @db.VarChar(255)
  task_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  task       task     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar(255)
  user_id    String   @db.Uuid
  task_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  task       task     @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model task {
  id                            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                         String       @db.VarChar(255)
  description                   String?      @db.VarChar(255)
  priority                      Int
  status                        String       @db.VarChar(255)
  due_date                      DateTime?    @db.Timestamp(6)
  assignee_id                   String       @db.Uuid
  waiting_on_id                 String       @db.Uuid
  created_at                    DateTime     @default(now()) @db.Timestamp(6)
  updated_at                    DateTime     @default(now()) @db.Timestamp(6)
  attachment                    attachment[]
  comment                       comment[]
  user_task_assignee_idTouser   user         @relation("task_assignee_idTouser", fields: [assignee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_task_waiting_on_idTouser user         @relation("task_waiting_on_idTouser", fields: [waiting_on_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                         String         @unique @db.VarChar(255)
  firstName                     String?        @db.VarChar(255)
  lastName                      String?        @db.VarChar(255)
  roq_user_id                   String         @db.VarChar(255)
  tenant_id                     String         @db.VarChar(255)
  created_at                    DateTime       @default(now()) @db.Timestamp(6)
  updated_at                    DateTime       @default(now()) @db.Timestamp(6)
  comment                       comment[]
  organization                  organization[]
  task_task_assignee_idTouser   task[]         @relation("task_assignee_idTouser")
  task_task_waiting_on_idTouser task[]         @relation("task_waiting_on_idTouser")
}
